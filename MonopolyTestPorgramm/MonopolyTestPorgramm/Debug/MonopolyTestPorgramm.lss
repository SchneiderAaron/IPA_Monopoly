
MonopolyTestPorgramm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f8  00800200  00800200  000005a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d9  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001048  00000000  00000000  00001ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b32  00000000  00000000  00002f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000818  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6a  00000000  00000000  00004428  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 3f       	cpi	r26, 0xF8	; 248
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	49 d0       	rcall	.+146    	; 0x1b2 <main>
 120:	03 c2       	rjmp	.+1030   	; 0x528 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <PortInitialisierung>:




void PortInitialisierung(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF;		// Port A auf Ausgang initialisieren (alle Pins)
 12c:	81 e2       	ldi	r24, 0x21	; 33
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
    DDRB = 0xFF;		// Port B auf Ausgang initialisieren (alle Pins)
 136:	84 e2       	ldi	r24, 0x24	; 36
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
    PORTB = 0b00100000; //Setzt Clear der Spieler Schieberegister auf 1
 140:	85 e2       	ldi	r24, 0x25	; 37
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	20 e2       	ldi	r18, 0x20	; 32
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
    DDRC = 0xFF;		// Port C auf Ausgang initialisieren (alle Pins)
 14a:	87 e2       	ldi	r24, 0x27	; 39
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
    DDRD = 0xFF;		// Port D auf Ausgang initialisieren (alle Pins)
 154:	8a e2       	ldi	r24, 0x2A	; 42
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
    DDRE = 0xFF;		// Port E auf Ausgang initialisieren (alle Pins)
 15e:	8d e2       	ldi	r24, 0x2D	; 45
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
    PORTE = 0b00010000; //Setzt Clear der Häuser schieberegister auf 1
 168:	8e e2       	ldi	r24, 0x2E	; 46
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	20 e1       	ldi	r18, 0x10	; 16
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
    DDRF = 0xFF;		// Port F auf Ausgang initialisieren (alle Pins)
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
    DDRH = 0xFF;		// Port H auf Ausgang initialisieren (alle Pins)
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
    PORTH = 0x10;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	20 e1       	ldi	r18, 0x10	; 16
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
    DDRJ = 0xFF;		// Port J auf Ausgang initialisieren (alle Pins)
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
    DDRK = 0x00;		// Port K auf Eingang initialisieren (alle Pins)
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	fc 01       	movw	r30, r24
 1a0:	10 82       	st	Z, r1
    DDRL = 0x00;		// Port L auf Eingang initialisieren (alle Pins)
 1a2:	8a e0       	ldi	r24, 0x0A	; 10
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	fc 01       	movw	r30, r24
 1a8:	10 82       	st	Z, r1
}
 1aa:	00 00       	nop
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <main>:
{
    uint16_t geld;
    uint8_t position;
};
int main(void)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	2c 97       	sbiw	r28, 0x0c	; 12
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
    struct spielerStruct spieler1 = {1500,9};
 1c6:	8c ed       	ldi	r24, 0xDC	; 220
 1c8:	95 e0       	ldi	r25, 0x05	; 5
 1ca:	9a 83       	std	Y+2, r25	; 0x02
 1cc:	89 83       	std	Y+1, r24	; 0x01
 1ce:	89 e0       	ldi	r24, 0x09	; 9
 1d0:	8b 83       	std	Y+3, r24	; 0x03
    struct spielerStruct spieler2 = {1500,10};
 1d2:	8c ed       	ldi	r24, 0xDC	; 220
 1d4:	95 e0       	ldi	r25, 0x05	; 5
 1d6:	9d 83       	std	Y+5, r25	; 0x05
 1d8:	8c 83       	std	Y+4, r24	; 0x04
 1da:	8a e0       	ldi	r24, 0x0A	; 10
 1dc:	8e 83       	std	Y+6, r24	; 0x06
    struct spielerStruct spieler3 = {1500,11};
 1de:	8c ed       	ldi	r24, 0xDC	; 220
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	98 87       	std	Y+8, r25	; 0x08
 1e4:	8f 83       	std	Y+7, r24	; 0x07
 1e6:	8b e0       	ldi	r24, 0x0B	; 11
 1e8:	89 87       	std	Y+9, r24	; 0x09
    struct spielerStruct spieler4 = {1500,12};
 1ea:	8c ed       	ldi	r24, 0xDC	; 220
 1ec:	95 e0       	ldi	r25, 0x05	; 5
 1ee:	9b 87       	std	Y+11, r25	; 0x0b
 1f0:	8a 87       	std	Y+10, r24	; 0x0a
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	8c 87       	std	Y+12, r24	; 0x0c
    PortInitialisierung();
 1f6:	96 df       	rcall	.-212    	; 0x124 <PortInitialisierung>
    SPI_init_all(9600);
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	95 e2       	ldi	r25, 0x25	; 37
 1fc:	51 d1       	rcall	.+674    	; 0x4a0 <SPI_init_all>

    setPropertyRgb(2,0,0,0);
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	17 d0       	rcall	.+46     	; 0x236 <setPropertyRgb>
    setPropertyRgb(10,0,0,0);
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	12 d0       	rcall	.+36     	; 0x236 <setPropertyRgb>
    setPropertyRgb(20,0,0,0);
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	84 e1       	ldi	r24, 0x14	; 20
    setPlayerPosition(spieler1.position,1);
 21a:	0d d0       	rcall	.+26     	; 0x236 <setPropertyRgb>
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	61 e0       	ldi	r22, 0x01	; 1
    setPlayerPosition(spieler2.position,2);
 220:	74 d0       	rcall	.+232    	; 0x30a <setPlayerPosition>
 222:	8e 81       	ldd	r24, Y+6	; 0x06
 224:	62 e0       	ldi	r22, 0x02	; 2
    setPlayerPosition(spieler3.position,3);
 226:	71 d0       	rcall	.+226    	; 0x30a <setPlayerPosition>
 228:	89 85       	ldd	r24, Y+9	; 0x09
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	6e d0       	rcall	.+220    	; 0x30a <setPlayerPosition>
    setPlayerPosition(spieler4.position,4);
 22e:	8c 85       	ldd	r24, Y+12	; 0x0c
 230:	64 e0       	ldi	r22, 0x04	; 4
 232:	6b d0       	rcall	.+214    	; 0x30a <setPlayerPosition>
 234:	ff cf       	rjmp	.-2      	; 0x234 <main+0x82>

00000236 <setPropertyRgb>:
            {
                setPlayerPosition(i,j);
                _delay_ms(10);
            }
        }*/
    }
 236:	cf 93       	push	r28
    
}
//funktion um die RGB zu setzen um anzuzeigen wem die Immobilien gehören
void setPropertyRgb(uint8_t FeldNummer, uint8_t rot, uint8_t gruen, uint8_t blau)
{
    leds[FeldNummer] = (rgb_color){rot,gruen,blau}; //Setzt die RGB werte im leds Array
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	fc 01       	movw	r30, r24
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	8e 0f       	add	r24, r30
 242:	9f 1f       	adc	r25, r31
 244:	fc 01       	movw	r30, r24
 246:	ec 55       	subi	r30, 0x5C	; 92
 248:	fd 4f       	sbci	r31, 0xFD	; 253
 24a:	60 83       	st	Z, r22
 24c:	41 83       	std	Z+1, r20	; 0x01
 24e:	22 83       	std	Z+2, r18	; 0x02
    for (uint8_t i = 0; i < LED_COUNT; i = i + 1)   //die for loop übermittelt die Daten an die WS2812 RGB Leds
 250:	c0 e0       	ldi	r28, 0x00	; 0
 252:	04 c0       	rjmp	.+8      	; 0x25c <setPropertyRgb+0x26>
    {
        led_strip_write(leds);
 254:	84 ea       	ldi	r24, 0xA4	; 164
 256:	92 e0       	ldi	r25, 0x02	; 2
 258:	2f d1       	rcall	.+606    	; 0x4b8 <led_strip_write>
}
//funktion um die RGB zu setzen um anzuzeigen wem die Immobilien gehören
void setPropertyRgb(uint8_t FeldNummer, uint8_t rot, uint8_t gruen, uint8_t blau)
{
    leds[FeldNummer] = (rgb_color){rot,gruen,blau}; //Setzt die RGB werte im leds Array
    for (uint8_t i = 0; i < LED_COUNT; i = i + 1)   //die for loop übermittelt die Daten an die WS2812 RGB Leds
 25a:	cf 5f       	subi	r28, 0xFF	; 255
 25c:	cc 31       	cpi	r28, 0x1C	; 28
 25e:	d0 f3       	brcs	.-12     	; 0x254 <setPropertyRgb+0x1e>
    {
        led_strip_write(leds);
    }
    
}
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <spielerPosFehlerAusgleich>:
//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
    //in den Feldern 0 - 9 muss nichts korrigiert werden
    if(spielerPos[spielerNummer - 1] < 10)
 264:	e8 2f       	mov	r30, r24
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	e1 56       	subi	r30, 0x61	; 97
 26a:	fd 4f       	sbci	r31, 0xFD	; 253
 26c:	90 81       	ld	r25, Z
 26e:	9a 30       	cpi	r25, 0x0A	; 10
 270:	08 f4       	brcc	.+2      	; 0x274 <spielerPosFehlerAusgleich+0x10>
 272:	41 c0       	rjmp	.+130    	; 0x2f6 <spielerPosFehlerAusgleich+0x92>
    {
        fehlerausgleich = 0;
    }
    //Korrektur der felder 10-19
    else if((spielerPos[spielerNummer - 1] > 9) && (spielerPos[spielerNummer - 1] < 20))
 274:	26 ef       	ldi	r18, 0xF6	; 246
 276:	29 0f       	add	r18, r25
 278:	2a 30       	cpi	r18, 0x0A	; 10
 27a:	90 f4       	brcc	.+36     	; 0x2a0 <spielerPosFehlerAusgleich+0x3c>
    {
        switch (spielerNummer)
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	51 f0       	breq	.+20     	; 0x294 <spielerPosFehlerAusgleich+0x30>
 280:	18 f4       	brcc	.+6      	; 0x288 <spielerPosFehlerAusgleich+0x24>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	d1 f1       	breq	.+116    	; 0x2fa <spielerPosFehlerAusgleich+0x96>
 286:	04 c0       	rjmp	.+8      	; 0x290 <spielerPosFehlerAusgleich+0x2c>
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	31 f0       	breq	.+12     	; 0x298 <spielerPosFehlerAusgleich+0x34>
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	31 f0       	breq	.+12     	; 0x29c <spielerPosFehlerAusgleich+0x38>
}

//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	08 95       	ret
        {
            case 1:
            fehlerausgleich = 1;
            break;
            case 2:
            fehlerausgleich = 2;
 294:	82 e0       	ldi	r24, 0x02	; 2
            break;
 296:	08 95       	ret
            case 3:
            fehlerausgleich = -2;
 298:	8e ef       	ldi	r24, 0xFE	; 254
            break;
 29a:	08 95       	ret
            case 4:
            fehlerausgleich = -1;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
            break;
 29e:	08 95       	ret
        }
    }
    //Korrektur der felder 20-29
    else if((spielerPos[spielerNummer - 1] > 19) && (spielerPos[spielerNummer - 1] < 30))
 2a0:	2c ee       	ldi	r18, 0xEC	; 236
 2a2:	29 0f       	add	r18, r25
 2a4:	2a 30       	cpi	r18, 0x0A	; 10
 2a6:	90 f4       	brcc	.+36     	; 0x2cc <spielerPosFehlerAusgleich+0x68>
    {
        
        switch (spielerNummer)
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	51 f0       	breq	.+20     	; 0x2c0 <spielerPosFehlerAusgleich+0x5c>
 2ac:	18 f4       	brcc	.+6      	; 0x2b4 <spielerPosFehlerAusgleich+0x50>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	31 f1       	breq	.+76     	; 0x2fe <spielerPosFehlerAusgleich+0x9a>
 2b2:	04 c0       	rjmp	.+8      	; 0x2bc <spielerPosFehlerAusgleich+0x58>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	31 f0       	breq	.+12     	; 0x2c4 <spielerPosFehlerAusgleich+0x60>
 2b8:	84 30       	cpi	r24, 0x04	; 4
 2ba:	31 f0       	breq	.+12     	; 0x2c8 <spielerPosFehlerAusgleich+0x64>
}

//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 95       	ret
        {
            case 1:
            fehlerausgleich = 3;
            break;
            case 2:
            fehlerausgleich = 1;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
            break;
 2c2:	08 95       	ret
            case 3:
            fehlerausgleich = -1;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
            break;
 2c6:	08 95       	ret
            case 4:
            fehlerausgleich = -3;
 2c8:	8d ef       	ldi	r24, 0xFD	; 253
            break;
 2ca:	08 95       	ret
        }
    }
    //Korrektur der felder 30-39
    else if((spielerPos[spielerNummer - 1] > 29) && (spielerPos[spielerNummer - 1] < 40))
 2cc:	9e 51       	subi	r25, 0x1E	; 30
 2ce:	9a 30       	cpi	r25, 0x0A	; 10
 2d0:	c0 f4       	brcc	.+48     	; 0x302 <spielerPosFehlerAusgleich+0x9e>
    {
        
        switch (spielerNummer)
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	51 f0       	breq	.+20     	; 0x2ea <spielerPosFehlerAusgleich+0x86>
 2d6:	18 f4       	brcc	.+6      	; 0x2de <spielerPosFehlerAusgleich+0x7a>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	a9 f0       	breq	.+42     	; 0x306 <spielerPosFehlerAusgleich+0xa2>
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <spielerPosFehlerAusgleich+0x82>
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	31 f0       	breq	.+12     	; 0x2ee <spielerPosFehlerAusgleich+0x8a>
 2e2:	84 30       	cpi	r24, 0x04	; 4
 2e4:	31 f0       	breq	.+12     	; 0x2f2 <spielerPosFehlerAusgleich+0x8e>
}

//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	08 95       	ret
        {
            case 1:
            fehlerausgleich = 2;
            break;
            case 2:
            fehlerausgleich = -1;
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
            break;
 2ec:	08 95       	ret
            case 3:
            fehlerausgleich = 1;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
            break;
 2f0:	08 95       	ret
            case 4:
            fehlerausgleich = -2;
 2f2:	8e ef       	ldi	r24, 0xFE	; 254
            break;
 2f4:	08 95       	ret
{
    int8_t fehlerausgleich = 0;
    //in den Feldern 0 - 9 muss nichts korrigiert werden
    if(spielerPos[spielerNummer - 1] < 10)
    {
        fehlerausgleich = 0;
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret
    else if((spielerPos[spielerNummer - 1] > 9) && (spielerPos[spielerNummer - 1] < 20))
    {
        switch (spielerNummer)
        {
            case 1:
            fehlerausgleich = 1;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	08 95       	ret
    {
        
        switch (spielerNummer)
        {
            case 1:
            fehlerausgleich = 3;
 2fe:	83 e0       	ldi	r24, 0x03	; 3
 300:	08 95       	ret
}

//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret
    {
        
        switch (spielerNummer)
        {
            case 1:
            fehlerausgleich = 2;
 306:	82 e0       	ldi	r24, 0x02	; 2
            break;
        }
    }
    //gibt den korrektur Wert zurück
    return fehlerausgleich;
 308:	08 95       	ret

0000030a <setPlayerPosition>:
    }
    
}

void setPlayerPosition(uint8_t feld, uint8_t spielerNummer)
{
 30a:	df 92       	push	r13
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	f8 2e       	mov	r15, r24
 31a:	d6 2e       	mov	r13, r22
    uint8_t spielerRegister, startLed, spielerPositionAlt = 0;
    int8_t fehlerausgleich = 0;
    
    //schaltet die led der alten position aus
    spielerRegister = (spielerPos[spielerNummer - 1] * 4) / 8;
 31c:	c6 2f       	mov	r28, r22
 31e:	d0 e0       	ldi	r29, 0x00	; 0
 320:	21 97       	sbiw	r28, 0x01	; 1
 322:	fe 01       	movw	r30, r28
 324:	e0 56       	subi	r30, 0x60	; 96
 326:	fd 4f       	sbci	r31, 0xFD	; 253
 328:	80 81       	ld	r24, Z
 32a:	08 2f       	mov	r16, r24
 32c:	10 e0       	ldi	r17, 0x00	; 0
 32e:	00 0f       	add	r16, r16
 330:	11 1f       	adc	r17, r17
 332:	00 0f       	add	r16, r16
 334:	11 1f       	adc	r17, r17
 336:	15 95       	asr	r17
 338:	07 95       	ror	r16
 33a:	15 95       	asr	r17
 33c:	07 95       	ror	r16
 33e:	15 95       	asr	r17
 340:	07 95       	ror	r16
    startLed = (spielerPos[spielerNummer - 1] * 4) % 8;
 342:	88 0f       	add	r24, r24
 344:	88 0f       	add	r24, r24
 346:	84 70       	andi	r24, 0x04	; 4
 348:	e8 2e       	mov	r14, r24
    fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
 34a:	86 2f       	mov	r24, r22
 34c:	8b df       	rcall	.-234    	; 0x264 <spielerPosFehlerAusgleich>
    spieler[spielerRegister][startLed + (spielerNummer - 1)+fehlerausgleich] = 0;
 34e:	9e 01       	movw	r18, r28
 350:	2e 0d       	add	r18, r14
 352:	31 1d       	adc	r19, r1
 354:	28 0f       	add	r18, r24
 356:	31 1d       	adc	r19, r1
 358:	87 fd       	sbrc	r24, 7
 35a:	3a 95       	dec	r19
 35c:	c8 01       	movw	r24, r16
 35e:	99 27       	eor	r25, r25
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	80 50       	subi	r24, 0x00	; 0
 36e:	9e 4f       	sbci	r25, 0xFE	; 254
 370:	fc 01       	movw	r30, r24
 372:	e2 0f       	add	r30, r18
 374:	f3 1f       	adc	r31, r19
 376:	10 82       	st	Z, r1
    
    //Speichert die neue Spielerposition
    spielerPos[spielerNummer - 1] = feld;
 378:	fe 01       	movw	r30, r28
 37a:	e0 56       	subi	r30, 0x60	; 96
 37c:	fd 4f       	sbci	r31, 0xFD	; 253
 37e:	f0 82       	st	Z, r15
    //fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
    //fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
    
    //schaltet die LED der Neuen Position ein
    spielerRegister = (feld * 4) / 8;
 380:	0f 2d       	mov	r16, r15
 382:	10 e0       	ldi	r17, 0x00	; 0
 384:	00 0f       	add	r16, r16
 386:	11 1f       	adc	r17, r17
 388:	00 0f       	add	r16, r16
 38a:	11 1f       	adc	r17, r17
 38c:	15 95       	asr	r17
 38e:	07 95       	ror	r16
 390:	15 95       	asr	r17
 392:	07 95       	ror	r16
 394:	15 95       	asr	r17
 396:	07 95       	ror	r16
    startLed = (feld * 4) % 8;
 398:	8f 2d       	mov	r24, r15
 39a:	88 0f       	add	r24, r24
 39c:	88 0f       	add	r24, r24
 39e:	84 70       	andi	r24, 0x04	; 4
 3a0:	f8 2e       	mov	r15, r24
    fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
 3a2:	8d 2d       	mov	r24, r13
 3a4:	5f df       	rcall	.-322    	; 0x264 <spielerPosFehlerAusgleich>
    spieler[spielerRegister][startLed + (spielerNummer - 1)+fehlerausgleich] = 1;
 3a6:	cf 0d       	add	r28, r15
 3a8:	d1 1d       	adc	r29, r1
 3aa:	c8 0f       	add	r28, r24
 3ac:	d1 1d       	adc	r29, r1
 3ae:	87 fd       	sbrc	r24, 7
 3b0:	da 95       	dec	r29
 3b2:	c8 01       	movw	r24, r16
 3b4:	99 27       	eor	r25, r25
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	80 50       	subi	r24, 0x00	; 0
 3c4:	9e 4f       	sbci	r25, 0xFE	; 254
 3c6:	c8 0f       	add	r28, r24
 3c8:	d9 1f       	adc	r29, r25
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	88 83       	st	Y, r24
    //initialisierung der VAriablen
    uint8_t transmitdata = 0;
    //im for loop werden jeweils 8 Bit aus dem array gesendet
    for(uint8_t i = 0; i < 21; i = i + 1)
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
 3d0:	24 c0       	rjmp	.+72     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
    {
        transmitdata = 0;
        for (uint8_t j = 0; j < 8; j = j + 1)
        {
            transmitdata = transmitdata << 1;
 3d2:	88 0f       	add	r24, r24
            transmitdata = (transmitdata | spieler[20-i][7-j]);
 3d4:	24 e1       	ldi	r18, 0x14	; 20
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	2c 1b       	sub	r18, r28
 3da:	31 09       	sbc	r19, r1
 3dc:	47 e0       	ldi	r20, 0x07	; 7
 3de:	50 e0       	ldi	r21, 0x00	; 0
 3e0:	49 1b       	sub	r20, r25
 3e2:	51 09       	sbc	r21, r1
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	22 0f       	add	r18, r18
 3ea:	33 1f       	adc	r19, r19
 3ec:	22 0f       	add	r18, r18
 3ee:	33 1f       	adc	r19, r19
 3f0:	20 50       	subi	r18, 0x00	; 0
 3f2:	3e 4f       	sbci	r19, 0xFE	; 254
 3f4:	f9 01       	movw	r30, r18
 3f6:	e4 0f       	add	r30, r20
 3f8:	f5 1f       	adc	r31, r21
 3fa:	20 81       	ld	r18, Z
 3fc:	82 2b       	or	r24, r18
    uint8_t transmitdata = 0;
    //im for loop werden jeweils 8 Bit aus dem array gesendet
    for(uint8_t i = 0; i < 21; i = i + 1)
    {
        transmitdata = 0;
        for (uint8_t j = 0; j < 8; j = j + 1)
 3fe:	9f 5f       	subi	r25, 0xFF	; 255
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	98 30       	cpi	r25, 0x08	; 8
        {
            transmitdata = transmitdata << 1;
            transmitdata = (transmitdata | spieler[20-i][7-j]);
        }
        Send2SPI(transmitdata);
 408:	20 f3       	brcs	.-56     	; 0x3d2 <setPlayerPosition+0xc8>
 40a:	51 d0       	rcall	.+162    	; 0x4ae <Send2SPI>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40c:	8f ec       	ldi	r24, 0xCF	; 207
 40e:	97 e0       	ldi	r25, 0x07	; 7
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
    fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
    spieler[spielerRegister][startLed + (spielerNummer - 1)+fehlerausgleich] = 1;
    //initialisierung der VAriablen
    uint8_t transmitdata = 0;
    //im for loop werden jeweils 8 Bit aus dem array gesendet
    for(uint8_t i = 0; i < 21; i = i + 1)
 418:	cf 5f       	subi	r28, 0xFF	; 255
 41a:	c5 31       	cpi	r28, 0x15	; 21
 41c:	90 f3       	brcs	.-28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        Send2SPI(transmitdata);
        //delay damit SPI funktiuniert
        _delay_us(500);
    }
    //latch
    PORTB = PORTB | 0x10;
 41e:	85 b1       	in	r24, 0x05	; 5
 420:	80 61       	ori	r24, 0x10	; 16
 422:	85 b9       	out	0x05, r24	; 5
    PORTB = PORTB & ~0x10;
 424:	85 b1       	in	r24, 0x05	; 5
 426:	8f 7e       	andi	r24, 0xEF	; 239
 428:	85 b9       	out	0x05, r24	; 5
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	08 95       	ret

0000043a <SPI_init>:
#include "SPI.h"

void SPI_init(void)
{
	// SPI einschalten und konfigurieren
	SPCR = SPCR | (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 43a:	8c b5       	in	r24, 0x2c	; 44
 43c:	81 65       	ori	r24, 0x51	; 81
 43e:	8c bd       	out	0x2c, r24	; 44
	// SPI clock setzen
	SPSR = SPSR | (1 << SPI2X);
 440:	8d b5       	in	r24, 0x2d	; 45
 442:	81 60       	ori	r24, 0x01	; 1
 444:	8d bd       	out	0x2d, r24	; 45
 446:	08 95       	ret

00000448 <SPI_init_all_USART>:
}

void SPI_init_all_USART(uint8_t baud)
{
	UBRR0 = 0;
 448:	e4 ec       	ldi	r30, 0xC4	; 196
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	11 82       	std	Z+1, r1	; 0x01
 44e:	10 82       	st	Z, r1
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR0C = (1<<UMSEL01)|(1<<UMSEL00)|(0<<2)|(0<<UCPOL0);
 450:	30 ec       	ldi	r19, 0xC0	; 192
 452:	30 93 c2 00 	sts	0x00C2, r19	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	/* Enable receiver and transmitter. */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);	
 456:	28 e1       	ldi	r18, 0x18	; 24
 458:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = baud;
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	91 83       	std	Z+1, r25	; 0x01
 460:	80 83       	st	Z, r24
	
	UBRR1 = 0;
 462:	ec ec       	ldi	r30, 0xCC	; 204
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	11 82       	std	Z+1, r1	; 0x01
 468:	10 82       	st	Z, r1
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR1C = (1<<UMSEL11)|(1<<UMSEL10)|(0<<2)|(0<<UCPOL1);
 46a:	30 93 ca 00 	sts	0x00CA, r19	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
	/* Enable receiver and transmitter. */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 46e:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
	UBRR1 = baud;
 472:	91 83       	std	Z+1, r25	; 0x01
 474:	80 83       	st	Z, r24
	
	UBRR2 = 0;
 476:	e4 ed       	ldi	r30, 0xD4	; 212
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	11 82       	std	Z+1, r1	; 0x01
 47c:	10 82       	st	Z, r1
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR2C = (1<<UMSEL21)|(1<<UMSEL20)|(0<<2)|(0<<UCPOL2);
 47e:	30 93 d2 00 	sts	0x00D2, r19	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
	/* Enable receiver and transmitter. */
	UCSR2B = (1<<RXEN2)|(1<<TXEN2);
 482:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
	UBRR2 = baud;
 486:	91 83       	std	Z+1, r25	; 0x01
 488:	80 83       	st	Z, r24
		
	UBRR3 = 0;
 48a:	e4 e3       	ldi	r30, 0x34	; 52
 48c:	f1 e0       	ldi	r31, 0x01	; 1
 48e:	11 82       	std	Z+1, r1	; 0x01
 490:	10 82       	st	Z, r1
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR3C = (1<<UMSEL31)|(1<<UMSEL30)|(0<<2)|(0<<UCPOL3);
 492:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
	/* Enable receiver and transmitter. */
	UCSR3B = (1<<RXEN3)|(1<<TXEN3);
 496:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
	UBRR3 = baud;
 49a:	91 83       	std	Z+1, r25	; 0x01
 49c:	80 83       	st	Z, r24
 49e:	08 95       	ret

000004a0 <SPI_init_all>:
}

void SPI_init_all(uint8_t baud)
{
 4a0:	cf 93       	push	r28
 4a2:	c8 2f       	mov	r28, r24
	SPI_init();
 4a4:	ca df       	rcall	.-108    	; 0x43a <SPI_init>
	SPI_init_all_USART(baud);
 4a6:	8c 2f       	mov	r24, r28
 4a8:	cf df       	rcall	.-98     	; 0x448 <SPI_init_all_USART>
}
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <Send2SPI>:
*
*
\*********************************************************************************/
void Send2SPI (uint8_t wert)
{
	SPDR = wert;					// 8Bits senden
 4ae:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));	// warten bis sendung erfolgte
 4b0:	0d b4       	in	r0, 0x2d	; 45
 4b2:	07 fe       	sbrs	r0, 7
 4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <Send2SPI+0x2>
}
 4b6:	08 95       	ret

000004b8 <led_strip_write>:
  0 pulse  = 400 ns
  1 pulse  = 850 ns
  "period" = 1300 ns
 */
void __attribute__((noinline)) led_strip_write(rgb_color * colors) 
{
 4b8:	fc 01       	movw	r30, r24
  unsigned int count = LED_COUNT;
  // Set the pin to be an output driving low.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
 4ba:	82 b1       	in	r24, 0x02	; 2
 4bc:	8e 7f       	andi	r24, 0xFE	; 254
 4be:	82 b9       	out	0x02, r24	; 2
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);
 4c0:	81 b1       	in	r24, 0x01	; 1
 4c2:	81 60       	ori	r24, 0x01	; 1
 4c4:	81 b9       	out	0x01, r24	; 1

  cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
 4c6:	f8 94       	cli
  1 pulse  = 850 ns
  "period" = 1300 ns
 */
void __attribute__((noinline)) led_strip_write(rgb_color * colors) 
{
  unsigned int count = LED_COUNT;
 4c8:	2c e1       	ldi	r18, 0x1C	; 28
 4ca:	30 e0       	ldi	r19, 0x00	; 0
  // Set the pin to be an output driving low.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);

  cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
  while(count--)
 4cc:	21 c0       	rjmp	.+66     	; 0x510 <led_strip_asm_end23+0x2>
  {
    // Send a color to the LED strip.
    // The assembly below also increments the 'colors' pointer,
    // it will be pointing to the next color at the end of this loop.
    asm volatile(
 4ce:	01 90       	ld	r0, Z+
 4d0:	00 80       	ld	r0, Z
 4d2:	07 d0       	rcall	.+14     	; 0x4e2 <send_led_strip_byte23>
 4d4:	02 90       	ld	r0, -Z
 4d6:	05 d0       	rcall	.+10     	; 0x4e2 <send_led_strip_byte23>
 4d8:	01 90       	ld	r0, Z+
 4da:	01 90       	ld	r0, Z+
 4dc:	01 90       	ld	r0, Z+
 4de:	01 d0       	rcall	.+2      	; 0x4e2 <send_led_strip_byte23>
 4e0:	16 c0       	rjmp	.+44     	; 0x50e <led_strip_asm_end23>

000004e2 <send_led_strip_byte23>:
 4e2:	07 d0       	rcall	.+14     	; 0x4f2 <send_led_strip_bit23>
 4e4:	06 d0       	rcall	.+12     	; 0x4f2 <send_led_strip_bit23>
 4e6:	05 d0       	rcall	.+10     	; 0x4f2 <send_led_strip_bit23>
 4e8:	04 d0       	rcall	.+8      	; 0x4f2 <send_led_strip_bit23>
 4ea:	03 d0       	rcall	.+6      	; 0x4f2 <send_led_strip_bit23>
 4ec:	02 d0       	rcall	.+4      	; 0x4f2 <send_led_strip_bit23>
 4ee:	01 d0       	rcall	.+2      	; 0x4f2 <send_led_strip_bit23>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <send_led_strip_bit23>

000004f2 <send_led_strip_bit23>:
 4f2:	10 9a       	sbi	0x02, 0	; 2
 4f4:	00 1c       	adc	r0, r0
 4f6:	00 00       	nop
 4f8:	00 00       	nop
 4fa:	08 f0       	brcs	.+2      	; 0x4fe <send_led_strip_bit23+0xc>
 4fc:	10 98       	cbi	0x02, 0	; 2
	...
 506:	00 00       	nop
 508:	08 f4       	brcc	.+2      	; 0x50c <send_led_strip_bit23+0x1a>
 50a:	10 98       	cbi	0x02, 0	; 2
 50c:	08 95       	ret

0000050e <led_strip_asm_end23>:
  // Set the pin to be an output driving low.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);

  cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
  while(count--)
 50e:	9a 01       	movw	r18, r20
 510:	a9 01       	movw	r20, r18
 512:	41 50       	subi	r20, 0x01	; 1
 514:	51 09       	sbc	r21, r1
 516:	23 2b       	or	r18, r19
 518:	09 f0       	breq	.+2      	; 0x51c <led_strip_asm_end23+0xe>
 51a:	d9 cf       	rjmp	.-78     	; 0x4ce <led_strip_write+0x16>
    );

    // Uncomment the line below to temporarily enable interrupts between each color.
    //sei(); asm volatile("nop\n"); cli();
  }
  sei();          // Re-enable interrupts now that we are done.
 51c:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 51e:	80 eb       	ldi	r24, 0xB0	; 176
 520:	94 e0       	ldi	r25, 0x04	; 4
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <led_strip_asm_end23+0x14>
 526:	08 95       	ret

00000528 <_exit>:
 528:	f8 94       	cli

0000052a <__stop_program>:
 52a:	ff cf       	rjmp	.-2      	; 0x52a <__stop_program>
