
MonopolyTestPorgramm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000796  0000082a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000796  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  0080020a  0080020a  00000834  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019b3  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001059  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd9  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000856  00000000  00000000  00004174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dd8  00000000  00000000  000049ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000057a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e9       	ldi	r30, 0x96	; 150
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a2 31       	cpi	r26, 0x12	; 18
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	49 d0       	rcall	.+146    	; 0x1b2 <main>
 120:	38 c3       	rjmp	.+1648   	; 0x792 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <PortInitialisierung>:




void PortInitialisierung(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF;		// Port A auf Ausgang initialisieren (alle Pins)
 12c:	81 e2       	ldi	r24, 0x21	; 33
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
    DDRB = 0xFF;		// Port B auf Ausgang initialisieren (alle Pins)
 136:	84 e2       	ldi	r24, 0x24	; 36
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
    PORTB = 0b00100000; //Setzt Clear der Spieler Schieberegister auf 1
 140:	85 e2       	ldi	r24, 0x25	; 37
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	20 e2       	ldi	r18, 0x20	; 32
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
    DDRC = 0xFF;		// Port C auf Ausgang initialisieren (alle Pins)
 14a:	87 e2       	ldi	r24, 0x27	; 39
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
    DDRD = 0xFF;		// Port D auf Ausgang initialisieren (alle Pins)
 154:	8a e2       	ldi	r24, 0x2A	; 42
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
    DDRE = 0xFF;		// Port E auf Ausgang initialisieren (alle Pins)
 15e:	8d e2       	ldi	r24, 0x2D	; 45
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
    PORTE = 0b00010000; //Setzt Clear der Häuser schieberegister auf 1
 168:	8e e2       	ldi	r24, 0x2E	; 46
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	20 e1       	ldi	r18, 0x10	; 16
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
    DDRF = 0xFF;		// Port F auf Ausgang initialisieren (alle Pins)
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
    DDRH = 0xFF;		// Port H auf Ausgang initialisieren (alle Pins)
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
    PORTH = 0x10;       //Setzt Clear der Siebensegmente schieberegister auf 1
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	20 e1       	ldi	r18, 0x10	; 16
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
    DDRJ = 0xFF;		// Port J auf Ausgang initialisieren (alle Pins)
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
    DDRK = 0x00;		// Port K auf Eingang initialisieren (alle Pins)
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	fc 01       	movw	r30, r24
 1a0:	10 82       	st	Z, r1
    DDRL = 0x00;		// Port L auf Eingang initialisieren (alle Pins)
 1a2:	8a e0       	ldi	r24, 0x0A	; 10
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	fc 01       	movw	r30, r24
 1a8:	10 82       	st	Z, r1
}
 1aa:	00 00       	nop
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <main>:
{
    uint16_t geld;
    uint8_t position;
};
int main(void)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	2c 97       	sbiw	r28, 0x0c	; 12
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
    struct spielerStruct spieler1 = {1234,9};
 1c6:	82 ed       	ldi	r24, 0xD2	; 210
 1c8:	94 e0       	ldi	r25, 0x04	; 4
 1ca:	9a 83       	std	Y+2, r25	; 0x02
 1cc:	89 83       	std	Y+1, r24	; 0x01
 1ce:	89 e0       	ldi	r24, 0x09	; 9
 1d0:	8b 83       	std	Y+3, r24	; 0x03
    struct spielerStruct spieler2 = {5678,10};
 1d2:	8e e2       	ldi	r24, 0x2E	; 46
 1d4:	96 e1       	ldi	r25, 0x16	; 22
 1d6:	9d 83       	std	Y+5, r25	; 0x05
 1d8:	8c 83       	std	Y+4, r24	; 0x04
 1da:	8a e0       	ldi	r24, 0x0A	; 10
 1dc:	8e 83       	std	Y+6, r24	; 0x06
    struct spielerStruct spieler3 = {9012,11};
 1de:	84 e3       	ldi	r24, 0x34	; 52
 1e0:	93 e2       	ldi	r25, 0x23	; 35
 1e2:	98 87       	std	Y+8, r25	; 0x08
 1e4:	8f 83       	std	Y+7, r24	; 0x07
 1e6:	8b e0       	ldi	r24, 0x0B	; 11
 1e8:	89 87       	std	Y+9, r24	; 0x09
    struct spielerStruct spieler4 = {3456,12};
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	9d e0       	ldi	r25, 0x0D	; 13
 1ee:	9b 87       	std	Y+11, r25	; 0x0b
 1f0:	8a 87       	std	Y+10, r24	; 0x0a
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	8c 87       	std	Y+12, r24	; 0x0c
    PortInitialisierung();
 1f6:	96 df       	rcall	.-212    	; 0x124 <PortInitialisierung>
    SPI_init_all(9600);
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	95 e2       	ldi	r25, 0x25	; 37
 1fc:	37 d2       	rcall	.+1134   	; 0x66c <SPI_init_all>

    setPropertyRgb(2,0,0,0);
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	27 d0       	rcall	.+78     	; 0x256 <setPropertyRgb>
    setPropertyRgb(10,0,0,0);
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	22 d0       	rcall	.+68     	; 0x256 <setPropertyRgb>
    setPropertyRgb(20,0,0,0);
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	84 e1       	ldi	r24, 0x14	; 20
    setPlayerPosition(spieler1.position,1);
 21a:	1d d0       	rcall	.+58     	; 0x256 <setPropertyRgb>
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	61 e0       	ldi	r22, 0x01	; 1
    setPlayerPosition(spieler2.position,2);
 220:	84 d0       	rcall	.+264    	; 0x32a <setPlayerPosition>
 222:	8e 81       	ldd	r24, Y+6	; 0x06
 224:	62 e0       	ldi	r22, 0x02	; 2
    setPlayerPosition(spieler3.position,3);
 226:	81 d0       	rcall	.+258    	; 0x32a <setPlayerPosition>
 228:	89 85       	ldd	r24, Y+9	; 0x09
 22a:	63 e0       	ldi	r22, 0x03	; 3
    setPlayerPosition(spieler4.position,4);
 22c:	7e d0       	rcall	.+252    	; 0x32a <setPlayerPosition>
 22e:	8c 85       	ldd	r24, Y+12	; 0x0c
 230:	64 e0       	ldi	r22, 0x04	; 4
    
    setGeld(spieler1.geld,1);
 232:	7b d0       	rcall	.+246    	; 0x32a <setPlayerPosition>
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	9a 81       	ldd	r25, Y+2	; 0x02
 238:	61 e0       	ldi	r22, 0x01	; 1
    setGeld(spieler2.geld,2);
 23a:	0f d1       	rcall	.+542    	; 0x45a <setGeld>
 23c:	8c 81       	ldd	r24, Y+4	; 0x04
 23e:	9d 81       	ldd	r25, Y+5	; 0x05
 240:	62 e0       	ldi	r22, 0x02	; 2
    setGeld(spieler3.geld,3);
 242:	0b d1       	rcall	.+534    	; 0x45a <setGeld>
 244:	8f 81       	ldd	r24, Y+7	; 0x07
 246:	98 85       	ldd	r25, Y+8	; 0x08
 248:	63 e0       	ldi	r22, 0x03	; 3
 24a:	07 d1       	rcall	.+526    	; 0x45a <setGeld>
    setGeld(spieler4.geld,4);
 24c:	8a 85       	ldd	r24, Y+10	; 0x0a
 24e:	9b 85       	ldd	r25, Y+11	; 0x0b
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	03 d1       	rcall	.+518    	; 0x45a <setGeld>
 254:	ff cf       	rjmp	.-2      	; 0x254 <main+0xa2>

00000256 <setPropertyRgb>:
            {
                setPlayerPosition(i,j);
                _delay_ms(10);
            }
        }*/
    }
 256:	cf 93       	push	r28
    
}
//funktion um die RGB zu setzen um anzuzeigen wem die Immobilien gehören
void setPropertyRgb(uint8_t FeldNummer, uint8_t rot, uint8_t gruen, uint8_t blau)
{
    leds[FeldNummer] = (rgb_color){rot,gruen,blau}; //Setzt die RGB werte im leds Array
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	ee 0f       	add	r30, r30
 25e:	ff 1f       	adc	r31, r31
 260:	8e 0f       	add	r24, r30
 262:	9f 1f       	adc	r25, r31
 264:	fc 01       	movw	r30, r24
 266:	e2 54       	subi	r30, 0x42	; 66
 268:	fd 4f       	sbci	r31, 0xFD	; 253
 26a:	60 83       	st	Z, r22
 26c:	41 83       	std	Z+1, r20	; 0x01
 26e:	22 83       	std	Z+2, r18	; 0x02
    for (uint8_t i = 0; i < LED_COUNT; i = i + 1)   //die for loop übermittelt die Daten an die WS2812 RGB Leds
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	04 c0       	rjmp	.+8      	; 0x27c <setPropertyRgb+0x26>
    {
        led_strip_write(leds);
 274:	8e eb       	ldi	r24, 0xBE	; 190
 276:	92 e0       	ldi	r25, 0x02	; 2
 278:	45 d2       	rcall	.+1162   	; 0x704 <led_strip_write>
}
//funktion um die RGB zu setzen um anzuzeigen wem die Immobilien gehören
void setPropertyRgb(uint8_t FeldNummer, uint8_t rot, uint8_t gruen, uint8_t blau)
{
    leds[FeldNummer] = (rgb_color){rot,gruen,blau}; //Setzt die RGB werte im leds Array
    for (uint8_t i = 0; i < LED_COUNT; i = i + 1)   //die for loop übermittelt die Daten an die WS2812 RGB Leds
 27a:	cf 5f       	subi	r28, 0xFF	; 255
 27c:	cc 31       	cpi	r28, 0x1C	; 28
 27e:	d0 f3       	brcs	.-12     	; 0x274 <setPropertyRgb+0x1e>
    {
        led_strip_write(leds);
    }
    
}
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <spielerPosFehlerAusgleich>:
//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
    //in den Feldern 0 - 9 muss nichts korrigiert werden
    if(spielerPos[spielerNummer - 1] < 10)
 284:	e8 2f       	mov	r30, r24
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	e7 55       	subi	r30, 0x57	; 87
 28a:	fd 4f       	sbci	r31, 0xFD	; 253
 28c:	90 81       	ld	r25, Z
 28e:	9a 30       	cpi	r25, 0x0A	; 10
 290:	08 f4       	brcc	.+2      	; 0x294 <spielerPosFehlerAusgleich+0x10>
 292:	41 c0       	rjmp	.+130    	; 0x316 <spielerPosFehlerAusgleich+0x92>
    {
        fehlerausgleich = 0;
    }
    //Korrektur der felder 10-19
    else if((spielerPos[spielerNummer - 1] > 9) && (spielerPos[spielerNummer - 1] < 20))
 294:	26 ef       	ldi	r18, 0xF6	; 246
 296:	29 0f       	add	r18, r25
 298:	2a 30       	cpi	r18, 0x0A	; 10
 29a:	90 f4       	brcc	.+36     	; 0x2c0 <spielerPosFehlerAusgleich+0x3c>
    {
        switch (spielerNummer)
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	51 f0       	breq	.+20     	; 0x2b4 <spielerPosFehlerAusgleich+0x30>
 2a0:	18 f4       	brcc	.+6      	; 0x2a8 <spielerPosFehlerAusgleich+0x24>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	d1 f1       	breq	.+116    	; 0x31a <spielerPosFehlerAusgleich+0x96>
 2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <spielerPosFehlerAusgleich+0x2c>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	31 f0       	breq	.+12     	; 0x2b8 <spielerPosFehlerAusgleich+0x34>
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	31 f0       	breq	.+12     	; 0x2bc <spielerPosFehlerAusgleich+0x38>
}

//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
        {
            case 1:
            fehlerausgleich = 1;
            break;
            case 2:
            fehlerausgleich = 2;
 2b4:	82 e0       	ldi	r24, 0x02	; 2
            break;
 2b6:	08 95       	ret
            case 3:
            fehlerausgleich = -2;
 2b8:	8e ef       	ldi	r24, 0xFE	; 254
            break;
 2ba:	08 95       	ret
            case 4:
            fehlerausgleich = -1;
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
            break;
 2be:	08 95       	ret
        }
    }
    //Korrektur der felder 20-29
    else if((spielerPos[spielerNummer - 1] > 19) && (spielerPos[spielerNummer - 1] < 30))
 2c0:	2c ee       	ldi	r18, 0xEC	; 236
 2c2:	29 0f       	add	r18, r25
 2c4:	2a 30       	cpi	r18, 0x0A	; 10
 2c6:	90 f4       	brcc	.+36     	; 0x2ec <spielerPosFehlerAusgleich+0x68>
    {
        
        switch (spielerNummer)
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	51 f0       	breq	.+20     	; 0x2e0 <spielerPosFehlerAusgleich+0x5c>
 2cc:	18 f4       	brcc	.+6      	; 0x2d4 <spielerPosFehlerAusgleich+0x50>
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	31 f1       	breq	.+76     	; 0x31e <spielerPosFehlerAusgleich+0x9a>
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <spielerPosFehlerAusgleich+0x58>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <spielerPosFehlerAusgleich+0x60>
 2d8:	84 30       	cpi	r24, 0x04	; 4
 2da:	31 f0       	breq	.+12     	; 0x2e8 <spielerPosFehlerAusgleich+0x64>
}

//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	08 95       	ret
        {
            case 1:
            fehlerausgleich = 3;
            break;
            case 2:
            fehlerausgleich = 1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
            break;
 2e2:	08 95       	ret
            case 3:
            fehlerausgleich = -1;
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
            break;
 2e6:	08 95       	ret
            case 4:
            fehlerausgleich = -3;
 2e8:	8d ef       	ldi	r24, 0xFD	; 253
            break;
 2ea:	08 95       	ret
        }
    }
    //Korrektur der felder 30-39
    else if((spielerPos[spielerNummer - 1] > 29) && (spielerPos[spielerNummer - 1] < 40))
 2ec:	9e 51       	subi	r25, 0x1E	; 30
 2ee:	9a 30       	cpi	r25, 0x0A	; 10
 2f0:	c0 f4       	brcc	.+48     	; 0x322 <spielerPosFehlerAusgleich+0x9e>
    {
        
        switch (spielerNummer)
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	51 f0       	breq	.+20     	; 0x30a <spielerPosFehlerAusgleich+0x86>
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <spielerPosFehlerAusgleich+0x7a>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	a9 f0       	breq	.+42     	; 0x326 <spielerPosFehlerAusgleich+0xa2>
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <spielerPosFehlerAusgleich+0x82>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	31 f0       	breq	.+12     	; 0x30e <spielerPosFehlerAusgleich+0x8a>
 302:	84 30       	cpi	r24, 0x04	; 4
 304:	31 f0       	breq	.+12     	; 0x312 <spielerPosFehlerAusgleich+0x8e>
}

//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret
        {
            case 1:
            fehlerausgleich = 2;
            break;
            case 2:
            fehlerausgleich = -1;
 30a:	8f ef       	ldi	r24, 0xFF	; 255
            break;
 30c:	08 95       	ret
            case 3:
            fehlerausgleich = 1;
 30e:	81 e0       	ldi	r24, 0x01	; 1
            break;
 310:	08 95       	ret
            case 4:
            fehlerausgleich = -2;
 312:	8e ef       	ldi	r24, 0xFE	; 254
            break;
 314:	08 95       	ret
{
    int8_t fehlerausgleich = 0;
    //in den Feldern 0 - 9 muss nichts korrigiert werden
    if(spielerPos[spielerNummer - 1] < 10)
    {
        fehlerausgleich = 0;
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret
    else if((spielerPos[spielerNummer - 1] > 9) && (spielerPos[spielerNummer - 1] < 20))
    {
        switch (spielerNummer)
        {
            case 1:
            fehlerausgleich = 1;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	08 95       	ret
    {
        
        switch (spielerNummer)
        {
            case 1:
            fehlerausgleich = 3;
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	08 95       	ret
}

//funktion zur Korrektur von Hardwarefehler
int8_t spielerPosFehlerAusgleich(uint8_t spielerNummer)
{
    int8_t fehlerausgleich = 0;
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret
    {
        
        switch (spielerNummer)
        {
            case 1:
            fehlerausgleich = 2;
 326:	82 e0       	ldi	r24, 0x02	; 2
            break;
        }
    }
    //gibt den korrektur Wert zurück
    return fehlerausgleich;
}
 328:	08 95       	ret

0000032a <setPlayerPosition>:
    }
    
}

void setPlayerPosition(uint8_t feld, uint8_t spielerNummer)
{
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	f8 2e       	mov	r15, r24
 33a:	d6 2e       	mov	r13, r22
    uint8_t spielerRegister, startLed, spielerPositionAlt = 0;
    int8_t fehlerausgleich = 0;
    
    //schaltet die led der alten position aus
    spielerRegister = (spielerPos[spielerNummer - 1] * 4) / 8;
 33c:	c6 2f       	mov	r28, r22
 33e:	d0 e0       	ldi	r29, 0x00	; 0
 340:	21 97       	sbiw	r28, 0x01	; 1
 342:	fe 01       	movw	r30, r28
 344:	e6 55       	subi	r30, 0x56	; 86
 346:	fd 4f       	sbci	r31, 0xFD	; 253
 348:	80 81       	ld	r24, Z
 34a:	08 2f       	mov	r16, r24
 34c:	10 e0       	ldi	r17, 0x00	; 0
 34e:	00 0f       	add	r16, r16
 350:	11 1f       	adc	r17, r17
 352:	00 0f       	add	r16, r16
 354:	11 1f       	adc	r17, r17
 356:	15 95       	asr	r17
 358:	07 95       	ror	r16
 35a:	15 95       	asr	r17
 35c:	07 95       	ror	r16
 35e:	15 95       	asr	r17
 360:	07 95       	ror	r16
    startLed = (spielerPos[spielerNummer - 1] * 4) % 8;
 362:	88 0f       	add	r24, r24
 364:	88 0f       	add	r24, r24
 366:	84 70       	andi	r24, 0x04	; 4
 368:	e8 2e       	mov	r14, r24
    fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
 36a:	86 2f       	mov	r24, r22
 36c:	8b df       	rcall	.-234    	; 0x284 <spielerPosFehlerAusgleich>
    spieler[spielerRegister][startLed + (spielerNummer - 1)+fehlerausgleich] = 0;
 36e:	9e 01       	movw	r18, r28
 370:	2e 0d       	add	r18, r14
 372:	31 1d       	adc	r19, r1
 374:	28 0f       	add	r18, r24
 376:	31 1d       	adc	r19, r1
 378:	87 fd       	sbrc	r24, 7
 37a:	3a 95       	dec	r19
 37c:	c8 01       	movw	r24, r16
 37e:	99 27       	eor	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	86 5f       	subi	r24, 0xF6	; 246
 38e:	9d 4f       	sbci	r25, 0xFD	; 253
 390:	fc 01       	movw	r30, r24
 392:	e2 0f       	add	r30, r18
 394:	f3 1f       	adc	r31, r19
 396:	10 82       	st	Z, r1
    
    //Speichert die neue Spielerposition
    spielerPos[spielerNummer - 1] = feld;
 398:	fe 01       	movw	r30, r28
 39a:	e6 55       	subi	r30, 0x56	; 86
 39c:	fd 4f       	sbci	r31, 0xFD	; 253
 39e:	f0 82       	st	Z, r15
    //fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
    //fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
    
    //schaltet die LED der Neuen Position ein
    spielerRegister = (feld * 4) / 8;
 3a0:	0f 2d       	mov	r16, r15
 3a2:	10 e0       	ldi	r17, 0x00	; 0
 3a4:	00 0f       	add	r16, r16
 3a6:	11 1f       	adc	r17, r17
 3a8:	00 0f       	add	r16, r16
 3aa:	11 1f       	adc	r17, r17
 3ac:	15 95       	asr	r17
 3ae:	07 95       	ror	r16
 3b0:	15 95       	asr	r17
 3b2:	07 95       	ror	r16
 3b4:	15 95       	asr	r17
 3b6:	07 95       	ror	r16
    startLed = (feld * 4) % 8;
 3b8:	8f 2d       	mov	r24, r15
 3ba:	88 0f       	add	r24, r24
 3bc:	88 0f       	add	r24, r24
 3be:	84 70       	andi	r24, 0x04	; 4
 3c0:	f8 2e       	mov	r15, r24
    fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
 3c2:	8d 2d       	mov	r24, r13
 3c4:	5f df       	rcall	.-322    	; 0x284 <spielerPosFehlerAusgleich>
    spieler[spielerRegister][startLed + (spielerNummer - 1)+fehlerausgleich] = 1;
 3c6:	cf 0d       	add	r28, r15
 3c8:	d1 1d       	adc	r29, r1
 3ca:	c8 0f       	add	r28, r24
 3cc:	d1 1d       	adc	r29, r1
 3ce:	87 fd       	sbrc	r24, 7
 3d0:	da 95       	dec	r29
 3d2:	c8 01       	movw	r24, r16
 3d4:	99 27       	eor	r25, r25
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	86 5f       	subi	r24, 0xF6	; 246
 3e4:	9d 4f       	sbci	r25, 0xFD	; 253
 3e6:	c8 0f       	add	r28, r24
 3e8:	d9 1f       	adc	r29, r25
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	88 83       	st	Y, r24
    //initialisierung der VAriablen
    uint8_t transmitdata = 0;
    //im for loop werden jeweils 8 Bit aus dem array gesendet
    for(uint8_t i = 0; i < 21; i = i + 1)
 3ee:	c0 e0       	ldi	r28, 0x00	; 0
 3f0:	24 c0       	rjmp	.+72     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    {
        transmitdata = 0;
        for (uint8_t j = 0; j < 8; j = j + 1)
        {
            transmitdata = transmitdata << 1;
 3f2:	88 0f       	add	r24, r24
            transmitdata = (transmitdata | spieler[20-i][7-j]);
 3f4:	24 e1       	ldi	r18, 0x14	; 20
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	2c 1b       	sub	r18, r28
 3fa:	31 09       	sbc	r19, r1
 3fc:	47 e0       	ldi	r20, 0x07	; 7
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	49 1b       	sub	r20, r25
 402:	51 09       	sbc	r21, r1
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	26 5f       	subi	r18, 0xF6	; 246
 412:	3d 4f       	sbci	r19, 0xFD	; 253
 414:	f9 01       	movw	r30, r18
 416:	e4 0f       	add	r30, r20
 418:	f5 1f       	adc	r31, r21
 41a:	20 81       	ld	r18, Z
 41c:	82 2b       	or	r24, r18
    uint8_t transmitdata = 0;
    //im for loop werden jeweils 8 Bit aus dem array gesendet
    for(uint8_t i = 0; i < 21; i = i + 1)
    {
        transmitdata = 0;
        for (uint8_t j = 0; j < 8; j = j + 1)
 41e:	9f 5f       	subi	r25, 0xFF	; 255
 420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	98 30       	cpi	r25, 0x08	; 8
        {
            transmitdata = transmitdata << 1;
            transmitdata = (transmitdata | spieler[20-i][7-j]);
        }
        Send2SPI(transmitdata);
 428:	20 f3       	brcs	.-56     	; 0x3f2 <setPlayerPosition+0xc8>
 42a:	27 d1       	rcall	.+590    	; 0x67a <Send2SPI>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42c:	8f ec       	ldi	r24, 0xCF	; 207
 42e:	97 e0       	ldi	r25, 0x07	; 7
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
    fehlerausgleich = spielerPosFehlerAusgleich(spielerNummer);
    spieler[spielerRegister][startLed + (spielerNummer - 1)+fehlerausgleich] = 1;
    //initialisierung der VAriablen
    uint8_t transmitdata = 0;
    //im for loop werden jeweils 8 Bit aus dem array gesendet
    for(uint8_t i = 0; i < 21; i = i + 1)
 438:	cf 5f       	subi	r28, 0xFF	; 255
 43a:	c5 31       	cpi	r28, 0x15	; 21
 43c:	90 f3       	brcs	.-28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
        Send2SPI(transmitdata);
        //delay damit SPI funktiuniert
        _delay_us(500);
    }
    //latch
    PORTB = PORTB | 0x10;
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	80 61       	ori	r24, 0x10	; 16
 442:	85 b9       	out	0x05, r24	; 5
    PORTB = PORTB & ~0x10;
 444:	85 b1       	in	r24, 0x05	; 5
 446:	8f 7e       	andi	r24, 0xEF	; 239
 448:	85 b9       	out	0x05, r24	; 5
}
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	ff 90       	pop	r15
 454:	ef 90       	pop	r14
 456:	df 90       	pop	r13
 458:	08 95       	ret

0000045a <setGeld>:
    (SEG_A | SEG_B | SEG_C | SEG_F | SEG_G | SEG_D)                             //9
};


void setGeld(uint16_t geld, uint8_t spieler)
{
 45a:	cf 92       	push	r12
 45c:	df 92       	push	r13
 45e:	ff 92       	push	r15
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	6c 01       	movw	r12, r24
 46a:	f6 2e       	mov	r15, r22
    uint8_t tausender,hunderter,zehner,einer,transmitdata = 0;
    tausender   = (geld / 1000) % 10;
 46c:	9c 01       	movw	r18, r24
 46e:	36 95       	lsr	r19
 470:	27 95       	ror	r18
 472:	36 95       	lsr	r19
 474:	27 95       	ror	r18
 476:	36 95       	lsr	r19
 478:	27 95       	ror	r18
 47a:	a5 ec       	ldi	r26, 0xC5	; 197
 47c:	b0 e2       	ldi	r27, 0x20	; 32
 47e:	7a d1       	rcall	.+756    	; 0x774 <__umulhisi3>
 480:	ac 01       	movw	r20, r24
 482:	52 95       	swap	r21
 484:	42 95       	swap	r20
 486:	4f 70       	andi	r20, 0x0F	; 15
 488:	45 27       	eor	r20, r21
 48a:	5f 70       	andi	r21, 0x0F	; 15
 48c:	45 27       	eor	r20, r21
 48e:	9a 01       	movw	r18, r20
 490:	ad ec       	ldi	r26, 0xCD	; 205
 492:	bc ec       	ldi	r27, 0xCC	; 204
 494:	6f d1       	rcall	.+734    	; 0x774 <__umulhisi3>
 496:	8c 01       	movw	r16, r24
 498:	16 95       	lsr	r17
 49a:	07 95       	ror	r16
 49c:	16 95       	lsr	r17
 49e:	07 95       	ror	r16
 4a0:	16 95       	lsr	r17
 4a2:	07 95       	ror	r16
 4a4:	c8 01       	movw	r24, r16
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	00 0f       	add	r16, r16
 4ac:	11 1f       	adc	r17, r17
 4ae:	00 0f       	add	r16, r16
 4b0:	11 1f       	adc	r17, r17
 4b2:	00 0f       	add	r16, r16
 4b4:	11 1f       	adc	r17, r17
 4b6:	08 0f       	add	r16, r24
 4b8:	19 1f       	adc	r17, r25
 4ba:	ca 01       	movw	r24, r20
 4bc:	80 1b       	sub	r24, r16
 4be:	91 0b       	sbc	r25, r17
 4c0:	8c 01       	movw	r16, r24
    hunderter   = (geld / 100)  % 10;
 4c2:	96 01       	movw	r18, r12
 4c4:	36 95       	lsr	r19
 4c6:	27 95       	ror	r18
 4c8:	36 95       	lsr	r19
 4ca:	27 95       	ror	r18
 4cc:	ab e7       	ldi	r26, 0x7B	; 123
 4ce:	b4 e1       	ldi	r27, 0x14	; 20
 4d0:	51 d1       	rcall	.+674    	; 0x774 <__umulhisi3>
 4d2:	ac 01       	movw	r20, r24
 4d4:	56 95       	lsr	r21
 4d6:	47 95       	ror	r20
 4d8:	9a 01       	movw	r18, r20
 4da:	ad ec       	ldi	r26, 0xCD	; 205
 4dc:	bc ec       	ldi	r27, 0xCC	; 204
 4de:	4a d1       	rcall	.+660    	; 0x774 <__umulhisi3>
 4e0:	ec 01       	movw	r28, r24
 4e2:	d6 95       	lsr	r29
 4e4:	c7 95       	ror	r28
 4e6:	d6 95       	lsr	r29
 4e8:	c7 95       	ror	r28
 4ea:	d6 95       	lsr	r29
 4ec:	c7 95       	ror	r28
 4ee:	ce 01       	movw	r24, r28
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	cc 0f       	add	r28, r28
 4f6:	dd 1f       	adc	r29, r29
 4f8:	cc 0f       	add	r28, r28
 4fa:	dd 1f       	adc	r29, r29
 4fc:	cc 0f       	add	r28, r28
 4fe:	dd 1f       	adc	r29, r29
 500:	c8 0f       	add	r28, r24
 502:	d9 1f       	adc	r29, r25
 504:	ca 01       	movw	r24, r20
 506:	8c 1b       	sub	r24, r28
 508:	9d 0b       	sbc	r25, r29
    zehner      = (geld / 10)   % 10;
 50a:	ec 01       	movw	r28, r24
 50c:	96 01       	movw	r18, r12
 50e:	32 d1       	rcall	.+612    	; 0x774 <__umulhisi3>
 510:	ac 01       	movw	r20, r24
 512:	56 95       	lsr	r21
 514:	47 95       	ror	r20
 516:	56 95       	lsr	r21
 518:	47 95       	ror	r20
 51a:	56 95       	lsr	r21
 51c:	47 95       	ror	r20
 51e:	9a 01       	movw	r18, r20
 520:	29 d1       	rcall	.+594    	; 0x774 <__umulhisi3>
 522:	fc 01       	movw	r30, r24
 524:	f6 95       	lsr	r31
 526:	e7 95       	ror	r30
 528:	f6 95       	lsr	r31
 52a:	e7 95       	ror	r30
 52c:	f6 95       	lsr	r31
 52e:	e7 95       	ror	r30
 530:	cf 01       	movw	r24, r30
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	ee 0f       	add	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	e8 0f       	add	r30, r24
 544:	f9 1f       	adc	r31, r25
 546:	ca 01       	movw	r24, r20
 548:	8e 1b       	sub	r24, r30
 54a:	9f 0b       	sbc	r25, r31
 54c:	fc 01       	movw	r30, r24
    einer       =  geld         % 10;
 54e:	ca 01       	movw	r24, r20
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	44 0f       	add	r20, r20
 556:	55 1f       	adc	r21, r21
 558:	44 0f       	add	r20, r20
 55a:	55 1f       	adc	r21, r21
 55c:	44 0f       	add	r20, r20
 55e:	55 1f       	adc	r21, r21
 560:	48 0f       	add	r20, r24
 562:	59 1f       	adc	r21, r25
 564:	c6 01       	movw	r24, r12
 566:	84 1b       	sub	r24, r20
 568:	95 0b       	sbc	r25, r21
    siebensegment[((spieler - 1) * 4)]      = ziffer[tausender];
 56a:	4f 2d       	mov	r20, r15
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	41 50       	subi	r20, 0x01	; 1
 570:	51 09       	sbc	r21, r1
 572:	44 0f       	add	r20, r20
 574:	55 1f       	adc	r21, r21
 576:	44 0f       	add	r20, r20
 578:	55 1f       	adc	r21, r21
 57a:	11 27       	eor	r17, r17
 57c:	d8 01       	movw	r26, r16
 57e:	a0 50       	subi	r26, 0x00	; 0
 580:	be 4f       	sbci	r27, 0xFE	; 254
 582:	2c 91       	ld	r18, X
 584:	da 01       	movw	r26, r20
 586:	a2 55       	subi	r26, 0x52	; 82
 588:	bd 4f       	sbci	r27, 0xFD	; 253
 58a:	2c 93       	st	X, r18
    siebensegment[((spieler - 1) * 4) + 1]  = ziffer[hunderter];
 58c:	dd 27       	eor	r29, r29
 58e:	c0 50       	subi	r28, 0x00	; 0
 590:	de 4f       	sbci	r29, 0xFE	; 254
 592:	28 81       	ld	r18, Y
 594:	da 01       	movw	r26, r20
 596:	a1 55       	subi	r26, 0x51	; 81
 598:	bd 4f       	sbci	r27, 0xFD	; 253
 59a:	2c 93       	st	X, r18
    siebensegment[((spieler - 1) * 4) + 2]  = ziffer[zehner];
 59c:	ff 27       	eor	r31, r31
 59e:	e0 50       	subi	r30, 0x00	; 0
 5a0:	fe 4f       	sbci	r31, 0xFE	; 254
 5a2:	20 81       	ld	r18, Z
 5a4:	fa 01       	movw	r30, r20
 5a6:	e0 55       	subi	r30, 0x50	; 80
 5a8:	fd 4f       	sbci	r31, 0xFD	; 253
 5aa:	20 83       	st	Z, r18
    siebensegment[((spieler - 1) * 4) + 3]  = ziffer[einer];
 5ac:	99 27       	eor	r25, r25
 5ae:	fc 01       	movw	r30, r24
 5b0:	e0 50       	subi	r30, 0x00	; 0
 5b2:	fe 4f       	sbci	r31, 0xFE	; 254
 5b4:	80 81       	ld	r24, Z
 5b6:	fa 01       	movw	r30, r20
 5b8:	ef 54       	subi	r30, 0x4F	; 79
 5ba:	fd 4f       	sbci	r31, 0xFD	; 253
 5bc:	80 83       	st	Z, r24
    //Ausgabe an siebensegment schieberegister
    for(uint8_t i = 0; i < 17; i = i + 1)
 5be:	c0 e0       	ldi	r28, 0x00	; 0
 5c0:	18 c0       	rjmp	.+48     	; 0x5f2 <setGeld+0x198>
    {
        USART_Transmit(2,siebensegment[16-i]);
 5c2:	e0 e1       	ldi	r30, 0x10	; 16
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	ec 1b       	sub	r30, r28
 5c8:	f1 09       	sbc	r31, r1
 5ca:	e2 55       	subi	r30, 0x52	; 82
 5cc:	fd 4f       	sbci	r31, 0xFD	; 253
 5ce:	60 81       	ld	r22, Z
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	84 d0       	rcall	.+264    	; 0x6dc <USART_Transmit>
 5d4:	8f ec       	ldi	r24, 0xCF	; 207
 5d6:	97 e0       	ldi	r25, 0x07	; 7
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <setGeld+0x17e>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <setGeld+0x184>
 5de:	00 00       	nop
        _delay_us(500);
        //latch
        PORTH = PORTH | 0x08;
 5e0:	e2 e0       	ldi	r30, 0x02	; 2
 5e2:	f1 e0       	ldi	r31, 0x01	; 1
 5e4:	80 81       	ld	r24, Z
 5e6:	88 60       	ori	r24, 0x08	; 8
 5e8:	80 83       	st	Z, r24
        PORTH = PORTH & ~0x08;
 5ea:	80 81       	ld	r24, Z
 5ec:	87 7f       	andi	r24, 0xF7	; 247
 5ee:	80 83       	st	Z, r24
    siebensegment[((spieler - 1) * 4)]      = ziffer[tausender];
    siebensegment[((spieler - 1) * 4) + 1]  = ziffer[hunderter];
    siebensegment[((spieler - 1) * 4) + 2]  = ziffer[zehner];
    siebensegment[((spieler - 1) * 4) + 3]  = ziffer[einer];
    //Ausgabe an siebensegment schieberegister
    for(uint8_t i = 0; i < 17; i = i + 1)
 5f0:	cf 5f       	subi	r28, 0xFF	; 255
 5f2:	c1 31       	cpi	r28, 0x11	; 17
 5f4:	30 f3       	brcs	.-52     	; 0x5c2 <setGeld+0x168>
        PORTH = PORTH | 0x08;
        PORTH = PORTH & ~0x08;
    }
    
    
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	ff 90       	pop	r15
 600:	df 90       	pop	r13
 602:	cf 90       	pop	r12
 604:	08 95       	ret

00000606 <SPI_init>:
#include "SPI.h"

void SPI_init(void)
{
	// SPI einschalten und konfigurieren
	SPCR = SPCR | (1 << SPE) | (1 << MSTR) | (1 << SPR0);
 606:	8c b5       	in	r24, 0x2c	; 44
 608:	81 65       	ori	r24, 0x51	; 81
 60a:	8c bd       	out	0x2c, r24	; 44
	// SPI clock setzen
	SPSR = SPSR | (1 << SPI2X);
 60c:	8d b5       	in	r24, 0x2d	; 45
 60e:	81 60       	ori	r24, 0x01	; 1
 610:	8d bd       	out	0x2d, r24	; 45
 612:	08 95       	ret

00000614 <SPI_init_all_USART>:
}

void SPI_init_all_USART(uint8_t baud)
{
	UBRR0 = 0;
 614:	e4 ec       	ldi	r30, 0xC4	; 196
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	11 82       	std	Z+1, r1	; 0x01
 61a:	10 82       	st	Z, r1
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR0C = (1<<UMSEL01)|(1<<UMSEL00)|(0<<2)|(0<<UCPOL0);
 61c:	30 ec       	ldi	r19, 0xC0	; 192
 61e:	30 93 c2 00 	sts	0x00C2, r19	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
	/* Enable receiver and transmitter. */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);	
 622:	28 e1       	ldi	r18, 0x18	; 24
 624:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = baud;
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	91 83       	std	Z+1, r25	; 0x01
 62c:	80 83       	st	Z, r24
	
	UBRR1 = 0;
 62e:	ec ec       	ldi	r30, 0xCC	; 204
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	11 82       	std	Z+1, r1	; 0x01
 634:	10 82       	st	Z, r1
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR1C = (1<<UMSEL11)|(1<<UMSEL10)|(0<<2)|(0<<UCPOL1);
 636:	30 93 ca 00 	sts	0x00CA, r19	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
	/* Enable receiver and transmitter. */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 63a:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
	UBRR1 = baud;
 63e:	91 83       	std	Z+1, r25	; 0x01
 640:	80 83       	st	Z, r24
	
	UBRR2 = 0;
 642:	e4 ed       	ldi	r30, 0xD4	; 212
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	11 82       	std	Z+1, r1	; 0x01
 648:	10 82       	st	Z, r1
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR2C = (1<<UMSEL21)|(1<<UMSEL20)|(0<<2)|(0<<UCPOL2);
 64a:	30 93 d2 00 	sts	0x00D2, r19	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
	/* Enable receiver and transmitter. */
	UCSR2B = (1<<RXEN2)|(1<<TXEN2);
 64e:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
	UBRR2 = baud;
 652:	91 83       	std	Z+1, r25	; 0x01
 654:	80 83       	st	Z, r24
		
	UBRR3 = 0;
 656:	e4 e3       	ldi	r30, 0x34	; 52
 658:	f1 e0       	ldi	r31, 0x01	; 1
 65a:	11 82       	std	Z+1, r1	; 0x01
 65c:	10 82       	st	Z, r1
	/* Set MSPI mode of operation and SPI data mode 0. */
	UCSR3C = (1<<UMSEL31)|(1<<UMSEL30)|(0<<2)|(0<<UCPOL3);
 65e:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
	/* Enable receiver and transmitter. */
	UCSR3B = (1<<RXEN3)|(1<<TXEN3);
 662:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
	UBRR3 = baud;
 666:	91 83       	std	Z+1, r25	; 0x01
 668:	80 83       	st	Z, r24
 66a:	08 95       	ret

0000066c <SPI_init_all>:
}

void SPI_init_all(uint8_t baud)
{
 66c:	cf 93       	push	r28
 66e:	c8 2f       	mov	r28, r24
	SPI_init();
 670:	ca df       	rcall	.-108    	; 0x606 <SPI_init>
	SPI_init_all_USART(baud);
 672:	8c 2f       	mov	r24, r28
 674:	cf df       	rcall	.-98     	; 0x614 <SPI_init_all_USART>
}
 676:	cf 91       	pop	r28
 678:	08 95       	ret

0000067a <Send2SPI>:
*
*
\*********************************************************************************/
void Send2SPI (uint8_t wert)
{
	SPDR = wert;					// 8Bits senden
 67a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));	// warten bis sendung erfolgte
 67c:	0d b4       	in	r0, 0x2d	; 45
 67e:	07 fe       	sbrs	r0, 7
 680:	fd cf       	rjmp	.-6      	; 0x67c <Send2SPI+0x2>
}
 682:	08 95       	ret

00000684 <USART0_Transmit>:

void USART0_Transmit(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1<<UDRE0)));
 684:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 688:	95 ff       	sbrs	r25, 5
 68a:	fc cf       	rjmp	.-8      	; 0x684 <USART0_Transmit>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 68c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 690:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 694:	88 23       	and	r24, r24
 696:	e4 f7       	brge	.-8      	; 0x690 <USART0_Transmit+0xc>
}
 698:	08 95       	ret

0000069a <USART1_Transmit>:

void USART1_Transmit(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR1A & (1<<UDRE1)));
 69a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 69e:	95 ff       	sbrs	r25, 5
 6a0:	fc cf       	rjmp	.-8      	; 0x69a <USART1_Transmit>
	/* Put data into buffer, sends the data */
	UDR1 = data;
 6a2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
	/* Wait for data to be received */
	while (!(UCSR1A & (1<<RXC1)));
 6a6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 6aa:	88 23       	and	r24, r24
 6ac:	e4 f7       	brge	.-8      	; 0x6a6 <USART1_Transmit+0xc>
}
 6ae:	08 95       	ret

000006b0 <USART2_Transmit>:

void USART2_Transmit(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR2A & (1<<UDRE2)));
 6b0:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 6b4:	95 ff       	sbrs	r25, 5
 6b6:	fc cf       	rjmp	.-8      	; 0x6b0 <USART2_Transmit>
	/* Put data into buffer, sends the data */
	UDR2 = data;
 6b8:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	/* Wait for data to be received */
	while (!(UCSR2A & (1<<RXC2)));
 6bc:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 6c0:	88 23       	and	r24, r24
 6c2:	e4 f7       	brge	.-8      	; 0x6bc <USART2_Transmit+0xc>
}
 6c4:	08 95       	ret

000006c6 <USART3_Transmit>:

void USART3_Transmit(uint8_t data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR3A & (1<<UDRE3)));
 6c6:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 6ca:	95 ff       	sbrs	r25, 5
 6cc:	fc cf       	rjmp	.-8      	; 0x6c6 <USART3_Transmit>
	/* Put data into buffer, sends the data */
	UDR3 = data;
 6ce:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
	/* Wait for data to be received */
	while (!(UCSR3A & (1<<RXC3)));
 6d2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
 6d6:	88 23       	and	r24, r24
 6d8:	e4 f7       	brge	.-8      	; 0x6d2 <USART3_Transmit+0xc>
}
 6da:	08 95       	ret

000006dc <USART_Transmit>:

void USART_Transmit(uint8_t usart_wahl, uint8_t data)
{
	switch (usart_wahl)
 6dc:	81 30       	cpi	r24, 0x01	; 1
 6de:	49 f0       	breq	.+18     	; 0x6f2 <USART_Transmit+0x16>
 6e0:	28 f0       	brcs	.+10     	; 0x6ec <USART_Transmit+0x10>
 6e2:	82 30       	cpi	r24, 0x02	; 2
 6e4:	49 f0       	breq	.+18     	; 0x6f8 <USART_Transmit+0x1c>
 6e6:	83 30       	cpi	r24, 0x03	; 3
 6e8:	51 f0       	breq	.+20     	; 0x6fe <USART_Transmit+0x22>
 6ea:	08 95       	ret
	{
		case 0:		USART0_Transmit(data);
 6ec:	86 2f       	mov	r24, r22
 6ee:	ca cf       	rjmp	.-108    	; 0x684 <USART0_Transmit>
					break;
 6f0:	08 95       	ret
		case 1:		USART1_Transmit(data);
 6f2:	86 2f       	mov	r24, r22
 6f4:	d2 cf       	rjmp	.-92     	; 0x69a <USART1_Transmit>
					break;
		case 2:		USART2_Transmit(data);
 6f6:	08 95       	ret
 6f8:	86 2f       	mov	r24, r22
					break;
 6fa:	da cf       	rjmp	.-76     	; 0x6b0 <USART2_Transmit>
		case 3:		USART3_Transmit(data);
 6fc:	08 95       	ret
 6fe:	86 2f       	mov	r24, r22
 700:	e2 cf       	rjmp	.-60     	; 0x6c6 <USART3_Transmit>
 702:	08 95       	ret

00000704 <led_strip_write>:
  0 pulse  = 400 ns
  1 pulse  = 850 ns
  "period" = 1300 ns
 */
void __attribute__((noinline)) led_strip_write(rgb_color * colors) 
{
 704:	fc 01       	movw	r30, r24
  unsigned int count = LED_COUNT;
  // Set the pin to be an output driving low.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
 706:	82 b1       	in	r24, 0x02	; 2
 708:	8e 7f       	andi	r24, 0xFE	; 254
 70a:	82 b9       	out	0x02, r24	; 2
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);
 70c:	81 b1       	in	r24, 0x01	; 1
 70e:	81 60       	ori	r24, 0x01	; 1
 710:	81 b9       	out	0x01, r24	; 1

  cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
 712:	f8 94       	cli
  1 pulse  = 850 ns
  "period" = 1300 ns
 */
void __attribute__((noinline)) led_strip_write(rgb_color * colors) 
{
  unsigned int count = LED_COUNT;
 714:	2c e1       	ldi	r18, 0x1C	; 28
 716:	30 e0       	ldi	r19, 0x00	; 0
  // Set the pin to be an output driving low.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);

  cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
  while(count--)
 718:	21 c0       	rjmp	.+66     	; 0x75c <led_strip_asm_end23+0x2>
  {
    // Send a color to the LED strip.
    // The assembly below also increments the 'colors' pointer,
    // it will be pointing to the next color at the end of this loop.
    asm volatile(
 71a:	01 90       	ld	r0, Z+
 71c:	00 80       	ld	r0, Z
 71e:	07 d0       	rcall	.+14     	; 0x72e <send_led_strip_byte23>
 720:	02 90       	ld	r0, -Z
 722:	05 d0       	rcall	.+10     	; 0x72e <send_led_strip_byte23>
 724:	01 90       	ld	r0, Z+
 726:	01 90       	ld	r0, Z+
 728:	01 90       	ld	r0, Z+
 72a:	01 d0       	rcall	.+2      	; 0x72e <send_led_strip_byte23>
 72c:	16 c0       	rjmp	.+44     	; 0x75a <led_strip_asm_end23>

0000072e <send_led_strip_byte23>:
 72e:	07 d0       	rcall	.+14     	; 0x73e <send_led_strip_bit23>
 730:	06 d0       	rcall	.+12     	; 0x73e <send_led_strip_bit23>
 732:	05 d0       	rcall	.+10     	; 0x73e <send_led_strip_bit23>
 734:	04 d0       	rcall	.+8      	; 0x73e <send_led_strip_bit23>
 736:	03 d0       	rcall	.+6      	; 0x73e <send_led_strip_bit23>
 738:	02 d0       	rcall	.+4      	; 0x73e <send_led_strip_bit23>
 73a:	01 d0       	rcall	.+2      	; 0x73e <send_led_strip_bit23>
 73c:	00 c0       	rjmp	.+0      	; 0x73e <send_led_strip_bit23>

0000073e <send_led_strip_bit23>:
 73e:	10 9a       	sbi	0x02, 0	; 2
 740:	00 1c       	adc	r0, r0
 742:	00 00       	nop
 744:	00 00       	nop
 746:	08 f0       	brcs	.+2      	; 0x74a <send_led_strip_bit23+0xc>
 748:	10 98       	cbi	0x02, 0	; 2
	...
 752:	00 00       	nop
 754:	08 f4       	brcc	.+2      	; 0x758 <send_led_strip_bit23+0x1a>
 756:	10 98       	cbi	0x02, 0	; 2
 758:	08 95       	ret

0000075a <led_strip_asm_end23>:
  // Set the pin to be an output driving low.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);

  cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
  while(count--)
 75a:	9a 01       	movw	r18, r20
 75c:	a9 01       	movw	r20, r18
 75e:	41 50       	subi	r20, 0x01	; 1
 760:	51 09       	sbc	r21, r1
 762:	23 2b       	or	r18, r19
 764:	09 f0       	breq	.+2      	; 0x768 <led_strip_asm_end23+0xe>
 766:	d9 cf       	rjmp	.-78     	; 0x71a <led_strip_write+0x16>
    );

    // Uncomment the line below to temporarily enable interrupts between each color.
    //sei(); asm volatile("nop\n"); cli();
  }
  sei();          // Re-enable interrupts now that we are done.
 768:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 76a:	80 eb       	ldi	r24, 0xB0	; 176
 76c:	94 e0       	ldi	r25, 0x04	; 4
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <led_strip_asm_end23+0x14>
 772:	08 95       	ret

00000774 <__umulhisi3>:
 774:	a2 9f       	mul	r26, r18
 776:	b0 01       	movw	r22, r0
 778:	b3 9f       	mul	r27, r19
 77a:	c0 01       	movw	r24, r0
 77c:	a3 9f       	mul	r26, r19
 77e:	70 0d       	add	r23, r0
 780:	81 1d       	adc	r24, r1
 782:	11 24       	eor	r1, r1
 784:	91 1d       	adc	r25, r1
 786:	b2 9f       	mul	r27, r18
 788:	70 0d       	add	r23, r0
 78a:	81 1d       	adc	r24, r1
 78c:	11 24       	eor	r1, r1
 78e:	91 1d       	adc	r25, r1
 790:	08 95       	ret

00000792 <_exit>:
 792:	f8 94       	cli

00000794 <__stop_program>:
 794:	ff cf       	rjmp	.-2      	; 0x794 <__stop_program>
