
LCDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  00000354  000003e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800232  00800232  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002287  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fec  00000000  00000000  0000289b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef1  00000000  00000000  00003887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00004778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d9  00000000  00000000  00004bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015af  00000000  00000000  00005491  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00006a40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	63 c0       	rjmp	.+198    	; 0x124 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e5       	ldi	r30, 0x54	; 84
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 33       	cpi	r26, 0x32	; 50
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e3       	ldi	r26, 0x32	; 50
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 33       	cpi	r26, 0x34	; 52
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	bd d0       	rcall	.+378    	; 0x29a <main>
 120:	17 c1       	rjmp	.+558    	; 0x350 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_23>:

//--------------------------------------------------------------------------------
// Timer 0 Overflow Interrupt ->  Wird alle 5ms aufgerufen
//--------------------------------------------------------------------------------
ISR(TIMER0_OVF_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
	if(takt_5ms_zaehler>0){
 132:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
 136:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <__data_end+0x1>
 13a:	89 2b       	or	r24, r25
 13c:	49 f0       	breq	.+18     	; 0x150 <__vector_23+0x2c>
		takt_5ms_zaehler--;
 13e:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
 142:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <__data_end+0x1>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <__data_end+0x1>
 14c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
	}
}
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <CmdDisplay>:
    DisplayOn = (DisplayOn << 2) & 0x04;
    CmdDisplay(CMD_DISPLAY_ON_OFF | BlinkOn | CursorOn | DisplayOn);
}

void shift(void)
{
 15e:	98 b1       	in	r25, 0x08	; 8
 160:	9f 7e       	andi	r25, 0xEF	; 239
 162:	98 b9       	out	0x08, r25	; 8
 164:	98 b1       	in	r25, 0x08	; 8
 166:	9b 7f       	andi	r25, 0xFB	; 251
 168:	98 b9       	out	0x08, r25	; 8
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	98 b1       	in	r25, 0x08	; 8
 16e:	92 60       	ori	r25, 0x02	; 2
 170:	98 b9       	out	0x08, r25	; 8
 172:	81 50       	subi	r24, 0x01	; 1
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	38 f4       	brcc	.+14     	; 0x186 <CmdDisplay+0x28>
 178:	8f e2       	ldi	r24, 0x2F	; 47
 17a:	91 e1       	ldi	r25, 0x11	; 17
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <CmdDisplay+0x1e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <CmdDisplay+0x24>
 182:	00 00       	nop
 184:	03 c0       	rjmp	.+6      	; 0x18c <CmdDisplay+0x2e>
 186:	90 ea       	ldi	r25, 0xA0	; 160
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <CmdDisplay+0x2a>
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	8d 7f       	andi	r24, 0xFD	; 253
 190:	88 b9       	out	0x08, r24	; 8
 192:	08 95       	ret

00000194 <initDisplay>:
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	29 97       	sbiw	r28, 0x09	; 9
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	8a b9       	out	0x0a, r24	; 10
 1ae:	87 b9       	out	0x07, r24	; 7
 1b0:	88 b1       	in	r24, 0x08	; 8
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	88 b9       	out	0x08, r24	; 8
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	80 e7       	ldi	r24, 0x70	; 112
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <initDisplay+0x28>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <initDisplay+0x32>
 1c6:	00 00       	nop
 1c8:	88 b1       	in	r24, 0x08	; 8
 1ca:	8e 7f       	andi	r24, 0xFE	; 254
 1cc:	88 b9       	out	0x08, r24	; 8
 1ce:	89 e0       	ldi	r24, 0x09	; 9
 1d0:	e0 e0       	ldi	r30, 0x00	; 0
 1d2:	f2 e0       	ldi	r31, 0x02	; 2
 1d4:	de 01       	movw	r26, r28
 1d6:	11 96       	adiw	r26, 0x01	; 1
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	8a 95       	dec	r24
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <initDisplay+0x44>
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	0a c0       	rjmp	.+20     	; 0x1f8 <initDisplay+0x64>
 1e4:	e1 e0       	ldi	r30, 0x01	; 1
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ec 0f       	add	r30, r28
 1ea:	fd 1f       	adc	r31, r29
 1ec:	e1 0f       	add	r30, r17
 1ee:	f1 1d       	adc	r31, r1
 1f0:	80 81       	ld	r24, Z
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	b4 df       	rcall	.-152    	; 0x15e <CmdDisplay>
 1f6:	1f 5f       	subi	r17, 0xFF	; 255
 1f8:	19 30       	cpi	r17, 0x09	; 9
 1fa:	a0 f3       	brcs	.-24     	; 0x1e4 <initDisplay+0x50>
 1fc:	29 96       	adiw	r28, 0x09	; 9
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	08 95       	ret

00000210 <DataDisplay>:
 210:	98 b1       	in	r25, 0x08	; 8
 212:	90 61       	ori	r25, 0x10	; 16
 214:	98 b9       	out	0x08, r25	; 8
 216:	98 b1       	in	r25, 0x08	; 8
 218:	9b 7f       	andi	r25, 0xFB	; 251
 21a:	98 b9       	out	0x08, r25	; 8
 21c:	8b b9       	out	0x0b, r24	; 11
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	82 60       	ori	r24, 0x02	; 2
 222:	88 b9       	out	0x08, r24	; 8
 224:	80 ea       	ldi	r24, 0xA0	; 160
 226:	8a 95       	dec	r24
 228:	f1 f7       	brne	.-4      	; 0x226 <DataDisplay+0x16>
 22a:	88 b1       	in	r24, 0x08	; 8
 22c:	8d 7f       	andi	r24, 0xFD	; 253
 22e:	88 b9       	out	0x08, r24	; 8
 230:	08 95       	ret

00000232 <clear>:
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	94 cf       	rjmp	.-216    	; 0x15e <CmdDisplay>
 236:	08 95       	ret

00000238 <home>:
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	91 cf       	rjmp	.-222    	; 0x15e <CmdDisplay>
 23c:	08 95       	ret

0000023e <displayOnOff>:
 23e:	41 70       	andi	r20, 0x01	; 1
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	62 70       	andi	r22, 0x02	; 2
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	24 70       	andi	r18, 0x04	; 4
 256:	84 2f       	mov	r24, r20
 258:	86 2b       	or	r24, r22
 25a:	82 2b       	or	r24, r18
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	7f cf       	rjmp	.-258    	; 0x15e <CmdDisplay>
 260:	08 95       	ret

00000262 <writeText>:
}



void writeText(uint8_t Zeile, uint8_t Spalte, uint8_t * Text)
{
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	8a 01       	movw	r16, r20
    CmdDisplay(CMD_SET_DDRAM_ADRESS + (0x10 * Zeile) + Spalte);
 26a:	28 2f       	mov	r18, r24
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	28 5f       	subi	r18, 0xF8	; 248
 270:	3f 4f       	sbci	r19, 0xFF	; 255
 272:	86 2f       	mov	r24, r22
 274:	90 e1       	ldi	r25, 0x10	; 16
 276:	29 9f       	mul	r18, r25
 278:	80 0d       	add	r24, r0
 27a:	11 24       	eor	r1, r1
 27c:	70 df       	rcall	.-288    	; 0x15e <CmdDisplay>
    else
    {
        CmdDisplay(CMD_SET_DDRAM_ADRESS + Spalte);
    }*/
    
    uint8_t i = 0;
 27e:	c0 e0       	ldi	r28, 0x00	; 0
    while(Text[i])
    {
        DataDisplay(Text[i]);
 280:	02 c0       	rjmp	.+4      	; 0x286 <writeText+0x24>
 282:	c6 df       	rcall	.-116    	; 0x210 <DataDisplay>
        i++;
 284:	cf 5f       	subi	r28, 0xFF	; 255
    {
        CmdDisplay(CMD_SET_DDRAM_ADRESS + Spalte);
    }*/
    
    uint8_t i = 0;
    while(Text[i])
 286:	f8 01       	movw	r30, r16
 288:	ec 0f       	add	r30, r28
 28a:	f1 1d       	adc	r31, r1
 28c:	80 81       	ld	r24, Z
 28e:	81 11       	cpse	r24, r1
 290:	f8 cf       	rjmp	.-16     	; 0x282 <writeText+0x20>
    {
        DataDisplay(Text[i]);
        i++;
    }
}
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <main>:


int main(void)
{
    PORTC = 0xFF;
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	33 ed       	ldi	r19, 0xD3	; 211
 2a2:	90 e3       	ldi	r25, 0x30	; 48
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	30 40       	sbci	r19, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0xa>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x14>
 2ae:	00 00       	nop
    _delay_ms(1000);
    LCD_DDR_CONTROL = 0xFF;
 2b0:	87 b9       	out	0x07, r24	; 7
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	31 ee       	ldi	r19, 0xE1	; 225
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	30 40       	sbci	r19, 0x00	; 0
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x1e>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x28>
 2c2:	00 00       	nop
    _delay_ms(100);
    initDisplay();
 2c4:	67 df       	rcall	.-306    	; 0x194 <initDisplay>
    clear();
 2c6:	b5 df       	rcall	.-150    	; 0x232 <clear>
    home();
 2c8:	b7 df       	rcall	.-146    	; 0x238 <home>
 2ca:	41 e0       	ldi	r20, 0x01	; 1
    displayOnOff(1,1,1);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	b6 df       	rcall	.-148    	; 0x23e <displayOnOff>
 2d2:	49 e0       	ldi	r20, 0x09	; 9
    _delay_ms(2000);
    displayOnOff(0,1,1); // Display off
    _delay_ms(2000);
    displayOnOff(1,1,1); // Display on
    writeText(1,3,"Display on");*/
    writeText(1,0,"Hallo Welt");
 2d4:	52 e0       	ldi	r21, 0x02	; 2
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	c3 df       	rcall	.-122    	; 0x262 <writeText>
 2dc:	9f ef       	ldi	r25, 0xFF	; 255
 2de:	23 ed       	ldi	r18, 0xD3	; 211
 2e0:	30 e3       	ldi	r19, 0x30	; 48
 2e2:	91 50       	subi	r25, 0x01	; 1
 2e4:	20 40       	sbci	r18, 0x00	; 0
 2e6:	30 40       	sbci	r19, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x48>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x52>
 2ec:	00 00       	nop
    _delay_ms(1000);
    displayOnOff(1,1,0);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	a4 df       	rcall	.-184    	; 0x23e <displayOnOff>
    writeText(0,0,"Hallo Welt 2");
 2f6:	44 e1       	ldi	r20, 0x14	; 20
 2f8:	52 e0       	ldi	r21, 0x02	; 2
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	b1 df       	rcall	.-158    	; 0x262 <writeText>
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	93 ed       	ldi	r25, 0xD3	; 211
 304:	20 e3       	ldi	r18, 0x30	; 48
 306:	81 50       	subi	r24, 0x01	; 1
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	20 40       	sbci	r18, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x6c>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x76>
 310:	00 00       	nop
    _delay_ms(1000);
    writeText(0,0,"1234567890");
 312:	41 e2       	ldi	r20, 0x21	; 33
 314:	52 e0       	ldi	r21, 0x02	; 2
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	a3 df       	rcall	.-186    	; 0x262 <writeText>
 31c:	3f ef       	ldi	r19, 0xFF	; 255
 31e:	83 ed       	ldi	r24, 0xD3	; 211
 320:	90 e3       	ldi	r25, 0x30	; 48
 322:	31 50       	subi	r19, 0x01	; 1
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x88>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x92>
    _delay_ms(1000);
    clear();
 32c:	00 00       	nop
 32e:	81 df       	rcall	.-254    	; 0x232 <clear>
    home();
 330:	83 df       	rcall	.-250    	; 0x238 <home>
 332:	2f ef       	ldi	r18, 0xFF	; 255
 334:	33 ed       	ldi	r19, 0xD3	; 211
 336:	80 e3       	ldi	r24, 0x30	; 48
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	30 40       	sbci	r19, 0x00	; 0
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x9e>
 340:	00 c0       	rjmp	.+0      	; 0x342 <main+0xa8>
 342:	00 00       	nop
    _delay_ms(1000);
    writeText(1,0,"Aaron");
 344:	4c e2       	ldi	r20, 0x2C	; 44
 346:	52 e0       	ldi	r21, 0x02	; 2
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	8a df       	rcall	.-236    	; 0x262 <writeText>
 34e:	ff cf       	rjmp	.-2      	; 0x34e <main+0xb4>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
